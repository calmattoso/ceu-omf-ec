#ifndef _FRCP_START_CEU
#define _FRCP_START_CEU

#include <c.ceu>
#include <uv/uv.ceu>

#include "communicator.ceu"
#include "topic.ceu"

code/await FRCP_Start(var& Communicator communicator, vector&[] byte id) -> FOREVER
do
    var& Topic res_topic;
    event& void topic_ok;
    spawn New_Topic(&communicator, &id) -> (&res_topic, &topic_ok);
    await topic_ok;

    event& void sub_ok;
    spawn Subscribe_Topic(&communicator, &res_topic) -> (&sub_ok);
    await sub_ok;

    spawn Channel_Consume(&communicator.channel, &outer.default_handlers);

    await FOREVER;
end

#ifdef start_test
var& Connection conn;
event& void conn_ok;
watching New_Connection(_) -> (&conn, &conn_ok) do
    await conn_ok;

    var& Channel channel;
    event& void ch_ok;
    spawn New_Channel(&conn) -> (&channel, &ch_ok);
    await ch_ok;

    var Communicator comm = val Communicator(&channel);

    vector[] byte res_id = [] .. "test_resource";
    spawn FRCP_Start(&comm, &res_id);

    await 3s;
end

escape 0;
#endif

#endif
