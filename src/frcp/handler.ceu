#ifndef _HANDLER_CEU
#define _HANDLER_CEU

#include <c.ceu>
#include <uv/uv.ceu>
#include <amqp_base.ceu>

#include <channel_data.ceu>
#include <envelope.ceu>

#include "communicator.ceu"
#include "topic.ceu"
#include "payload.ceu"

#ifdef handler_test
#include "msg_op_handlers.ceu"
#endif

code/await Handler (var& Channel channel, var Envelope env) -> void
do
    // Get the ID of the resource from the environment. FRCP_Start must have run before this.
    vector[] byte res_id = [] .. [[ frcp_res_id ]];  

    // Extract JSON payload and convert it to Ceu Payload
    var _char&& payload_c_str = null;
    payload_c_str = _stringify_bytes(env.contents.message.body);
    do finalize with
        _free(payload_c_str);
    end

    _printf("--XX--\n%s\n--XX--\n\n", payload_c_str);

    var Payload in_payload = _;
    vector[] byte payload_ceu_str = [] .. (&&payload_c_str[0] as _char&&);
    call JSONToPayload(&payload_ceu_str, &in_payload);

    // Perform checks to assess if the resource is the destination for the message.
    // - First check if the message's `src` field matches the resource id.  
    // - If `guard` is set, have the resource itself check if its attributes match the target.
    vector[] byte res_id_uri = "amqp://localhost/frcp." .. res_id;
    if (_strcmp((&&in_payload.src[0] as _char&&), (&&res_id_uri[0] as _char&&)) == 0) then
#ifdef DEBUG
        _printf("Own msg, caught by `src`. Ignoring...\n");
#endif
        escape;
    end 

    if ($in_payload.guard > 0) then 
        var bool is_target = await Check_Guard(&in_payload.guard);
        if (not is_target) then
#ifdef DEBUG
        _printf("Own msg, caught by guard. Ignoring...\n");
#endif
            escape;
        end
    end

    // As we're handling the message, set up communicator and resource topic
    var Communicator comm = val Communicator(&channel);

    var&   Topic res_topic;
    event& void  topic_ok;
    spawn New_Topic(&comm, &res_id) -> (&res_topic, &topic_ok);
    await topic_ok;

    // Dummy initializers...
    vector[] byte dummy_err_reason = [] .. "";
    event    int  dummy_handler_yield;

    var    Topic dummy_rp_topic = _;
    event  void  dummy_rp_topic_ok;

    // Now process message per type...
    var int handler_err = FRCP_RET_SUCCESS;
    if (_strcmp((&&in_payload.op[0] as _char&&), FRCP_OP_INFORM) == 0) then
#ifdef DEBUG
            _printf("inform\n");
#endif
        // if this is a reply to a previous message, tell the user the type of its corresponding request
        vector[] byte request_type = [] .. [[ frcp_response_lookup[@in_payload.cid] or "" ]];
        handler_err = await Handle_Inform(&comm, &in_payload, &request_type);
        if handler_err == FRCP_RET_SUCCESS then
            // on success, remove the message from lookup table
            [[
                frcp_response_lookup[@in_payload.cid] = nil
            ]]
        end
    else
        // If `rp` is set, then we must also post messages to it. If such is the case
        // create `rp_topic`.
        var& Topic rp_topic;
        event& void rp_topic_ok;

        pool[] New_Topic topics;
        if ($in_payload.rp > 0) then
            spawn New_Topic(&comm, &in_payload.rp) -> (&rp_topic, &rp_topic_ok) in topics;
            await rp_topic_ok;
        else
            rp_topic    = &dummy_rp_topic;
            rp_topic_ok = &dummy_rp_topic_ok;
        end

        // Dealing with message that alters the state of resource, so need to publish an inform response.
        var Payload response = _;
        response.op    = [] .. FRCP_OP_INFORM;
        response.props = [] .. in_payload.props;
        response.it    = [] .. FRCP_IT_STATUS;
        response.cid   = [] .. in_payload.mid;

        vector&[] byte err_reason;
        event& int handler_yield; // FRCP_RET_{SUCCESS,ERROR,WIP}

        // CREATE
        if (_strcmp((&&in_payload.op[0] as _char&&), FRCP_OP_CREATE) == 0) then
#ifdef DEBUG
            _printf("create\n");
#endif
            spawn Handle_Create(&in_payload.props) -> (&handler_yield, &err_reason);
            handler_err = await handler_yield;
            
            if handler_err == FRCP_RET_SUCCESS then
                response.it = [] .. FRCP_IT_CREATION_OK;
            else
                response.it = [] .. FRCP_IT_CREATION_FAILED;
                response.reason = [] .. err_reason;
            end
            _printf("%s\n", (&&rp_topic.name[0] as _char&&));

        // CONFIGURE
        else/if (_strcmp((&&in_payload.op[0] as _char&&), FRCP_OP_CONFIGURE) == 0) then
#ifdef DEBUG
            _printf("configure\n");
#endif
            // if configure carries membership, then sign up to topic and ignore user handler
            [[
                config_props = JSON:decode(@in_payload.props)
            ]]
            vector[] byte membership = [] .. [[ config_props.membership or "" ]];
            if ($membership > 0) then
                err_reason    = &dummy_err_reason;
                handler_yield = &dummy_handler_yield;

                // subscribe to new topic from membership                
                var&   Topic memb_topic;
                event& void  memb_topic_ok;
                spawn New_Topic(&comm, &membership) -> (&memb_topic, &memb_topic_ok)
                    in outer.frcp_topic_pool;
                await memb_topic_ok;

                var&   Subscription sub_id;
                event& void         sub_ok;
                spawn Subscribe_Topic(&comm, &memb_topic) -> (&sub_id, &sub_ok) 
                    in outer.frcp_subscription_pool;
                await sub_ok;
                
                // Now, generate the complete list of memberships to publish in the response.
                [[  
                    memb_keyset = {}
                    for (k,v) in pairs(frcp_membership_set) do
                        table.insert(memb_keyset, k)
                    end
                    config_props.membership = memb_keyset
                    config_props_str = JSON:encode(config_props)
                ]]
                response.props = [] .. [[ config_props_str ]];
                response.it    = [] .. FRCP_IT_STATUS;
            else
                vector&[] byte new_props;
                spawn Handle_Configure(&in_payload.props) -> (&handler_yield, &err_reason, &new_props);
                every handler_err in handler_yield do
                    response.props = [] .. new_props;
                    response.it    = [] .. FRCP_IT_STATUS; // assume success

                    // If we reach success or error, publish final (possibly only) message outside.
                    if handler_err != FRCP_RET_WIP then 
                        if handler_err == FRCP_RET_ERROR then
                            response.it     = [] .. FRCP_IT_ERROR;
                            response.reason = [] .. err_reason;
                        end
                        break; 
                    end

                    // If still updating, then publish progress...
                    spawn Publish_Payload(&comm, &rp_topic, response) in outer.frcp_publish_dispatch;
                    if ($in_payload.rp > 0) then
                        spawn Publish_Payload(&comm, &rp_topic, response) in outer.frcp_publish_dispatch;
                    end
                end
            end
        // REQUEST
        else/if (_strcmp((&&in_payload.op[0] as _char&&), FRCP_OP_REQUEST) == 0) then
#ifdef DEBUG
            _printf("request\n");
#endif
            vector&[] byte new_props;
            spawn Handle_Request(&in_payload.props) -> (&handler_yield, &err_reason, &new_props);
            handler_err = await handler_yield;
            
            response.props = [] .. new_props;
            //_printf("New props: %s\n", (&&new_props[0] as _char&&));
            if handler_err == FRCP_RET_SUCCESS then
                response.it = [] .. FRCP_IT_STATUS;
            else
                response.it = [] .. FRCP_IT_ERROR;
                response.reason = [] .. err_reason;
            end

        // RELEASE
        else/if (_strcmp((&&in_payload.op[0] as _char&&), FRCP_OP_RELEASE) == 0) then
#ifdef DEBUG
            _printf("release\n");
#endif
            spawn Handle_Release(&in_payload.props) -> (&handler_yield, &err_reason);
            handler_err = await handler_yield;

            if handler_err == FRCP_RET_SUCCESS then
                response.it = [] .. FRCP_IT_RELEASE_OK;
            else
                response.it = [] .. FRCP_IT_RELEASE_FAILED;
                response.reason = [] .. err_reason;
            end

        else
            // dummy... not lit
            err_reason    = &dummy_err_reason;
            handler_yield = &dummy_handler_yield;
        end

        // Publish to resource topic and, if applicable, to `reply_to` topic
        await Publish_Payload(&comm, &res_topic, response);
        if ($in_payload.rp > 0) then
            await Publish_Payload(&comm, &rp_topic, response);
        end
    end
end

#ifdef handler_test
#include <connection.ceu>
#include <channel.ceu>

#include "start.ceu"

event void start_test;
par/or do
    var& Connection conn_res;
    event& void conn_res_ok;

    watching New_Connection(_) -> (&conn_res, &conn_res_ok) do
        await conn_res_ok;

        var& Channel channel_res;
        event& void ch_res_ok;
        spawn New_Channel(&conn_res) -> (&channel_res, &ch_res_ok);
        await ch_res_ok;

        var Communicator comm_res = val Communicator(&channel_res);

        event& void start_res_done;
        vector[] byte res_id = [] .. "test_resource";
        spawn FRCP_Start(&comm_res, &res_id) -> (&start_res_done);
        await start_res_done;

        emit start_test;
        await FOREVER;
    end
with
    await start_test;

    var& Connection conn;
    event& void conn_ok;

    watching New_Connection(_) -> (&conn, &conn_ok) do
        await conn_ok;

        var Payload p = _;
        p.op     = [] .. FRCP_OP_INFORM;
        p.mid    = [] .. [[ string.random(FRCP_ID_LEN, "%l%d") ]];
        p.src    = [] .. "test_res";
        p.ts     = [] .. [[ os.time() ]];
        p.props  = [] .. [[ "{\"test\": \"oioioi\",\"field2\": [1,2,3]}" ]];
        p.rp     = [] .. [[ string.random(8, "%l%d") ]];
        p.it     = [] .. FRCP_IT_STATUS;
        p.cid    = [] .. [[ string.random(FRCP_ID_LEN, "%l%d") ]];
        p.reason = [] .. "this is a dummy reason with whitespace.";
        p.guard  = [] .. [[ "{\"dummy\":\"dummy\"}" ]];

        var& Channel channel;
        event& void ch_ok;
        spawn New_Channel(&conn) -> (&channel, &ch_ok);
        await ch_ok;

        var Communicator comm = val Communicator(&channel);

        event& void start_done;
        vector[] byte server_id = [] .. "controller";
        spawn FRCP_Start(&comm, &server_id) -> (&start_done);
        await start_done;

        var& Topic res_topic;
        event& void topic_ok;
        vector[] byte target_res_id = [] .. "test_resource";
        spawn New_Topic(&comm, &target_res_id) -> (&res_topic, &topic_ok);
        await topic_ok;

        spawn Publish_Payload(&comm, &res_topic, p) in frcp_publish_dispatch;
        await FOREVER;
    end
with
    await 5s;
end
#endif

#endif
