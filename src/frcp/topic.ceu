#ifndef _FRCP_TOPIC_CEU
#define _FRCP_TOPIC_CEU

#include "communicator.ceu"
#include <exchange.ceu>
#include <queue.ceu>
#include <q2x_bind.ceu>
#include <q_subscribe.ceu>

data Topic with
    vector&[] byte     name;
    var&      Exchange exchange;
end

code/await New_Topic(var& Communicator communicator, vector&[] byte name) 
                        -> (var& Topic topic, event& void ok) 
                            -> FOREVER 
do
    event void ok_;
    ok = &ok_;

    var& Exchange topic_exchange;
    event& void ex_ok;
    spawn New_Exchange(&communicator.channel, 
                       ExchangeContext((&&name[0] as _char&&), "fanout",_,_,_,_,_)) -> (&topic_exchange, &ex_ok);
    var Topic topic_ = val Topic(&name, &topic_exchange);
    topic = &topic_;    
    await ex_ok;

    emit ok_;
    await FOREVER;
end 

code/await Subscribe_Topic(var& Communicator communicator, var& Topic topic)
                                -> (event& void ok)
                                    -> FOREVER
do
    event void ok_;
    ok = &ok_;

    var& Queue queue;
    event& void q_ok;
    
    spawn New_Queue(&communicator.channel, QueueContext((&&topic.name[0] as _char&&),_,_,_,_,_amqp_empty_table))
        -> (&queue, &q_ok);
    await q_ok;

    event& void bind_ok;
    spawn Bind_Queue(&communicator.channel, &queue, &topic.exchange, "", _amqp_empty_table) -> (&bind_ok);
    await bind_ok;

    event& void qsub_ok;
    spawn Subscribe_Queue(&communicator.channel, &queue, _, 0) -> (&qsub_ok);
    await qsub_ok;

    emit ok_;
    await FOREVER;
end

#endif

