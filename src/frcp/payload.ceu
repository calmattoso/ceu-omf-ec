#ifndef _FRCP_PAYLOAD_CEU
#define _FRCP_PAYLOAD_CEU

#include <c.ceu>
#include <uv/uv.ceu>

#include <amqp_base.ceu>

/*
 * ```json
 * {
 *     "op" : MTYPE,
 *     "mid": ID,
 *     "src": RID,
 *     "ts" : TIMESTAMP,
 *     "rp" : TOPIC,
 *     ....
 * }
 * ```
 *
 * The meaning of each fields is similar to the previous XML syntax above, i.e.
 * - op  :: `MTYPE`   = the type of message, either create, configure, request, inform, or release
 * - mid :: `ID`        = a globally unique ID for this message
 * - src :: `RID`       = a globally unique ID for the resource that published this message
 * - ts  :: `TIMESTAMP` = the Posix/Unix time in second when this message was generated by its publisher
 * - rp  :: `TOPIC`     = optional, if the publisher of this message would like any replying messages to be 
 *                        published to a specific TOPIC address  
 */

#define FRCP_OP_CONFIGURE "configure"
#define FRCP_OP_CREATE    "create"
#define FRCP_OP_INFORM    "inform"
#define FRCP_OP_REQUEST   "request"
#define FRCP_OP_RELEASE   "release"

data Payload with
    var      _plain_string op;
    vector[] byte          mid;     
    vector[] byte          src;
    vector[] byte          ts; 
    vector[] byte          rp    = [] .. ""; 
    vector[] byte          props = [] .. "";
    vector[] byte          guard = [] .. "";
end

/*
 * ```json
 * {
 *     "op" : "inform",
 *     "mid": ID,
 *     "src": RID,
 *     "ts" : TIMESTAMP,
 *     "it" : TYPE,
 *     "cid": CID,
      ["reason": REASON "]
 *    ....
 * }
 * ```
 *
 * - it  :: `TYPE` = type of this inform message. All resources must support the following basic types: `CREATION.OK`, 
 *                   `CREATION.FAILED`, `STATUS`, `RELEASED`, `ERROR`, and `WARN`. In addition, any resource may define
 *                   its own particular types of inform message, following the convention `BASIC_TYPE.SPECIFIC_TYPE`. 
 *                   For example, if you have a custom resource which wants to return an inform message as a reply to a
 *                   configure message that contained a syntax error, then that custom resource may define and use the 
 *                   custom inform type `ERROR.SYNTAX`.
 *
 * - cid :: `CID`  = this is the Context ID for this message. This element or object must be present only if this 
 *                   inform message is a reply to another message, in which case CID must be the ID of the original 
 *                   message. This element is not present in a spontaneous inform message.
 *
 * - reason :: `REASON` = optional reason that explains in more detail why a failure occurred. 
 * 
 */
#define FRCP_IT_CREATION_OK     "CREATION.OK"
#define FRCP_IT_CREATION_FAILED "CREATION.FAILED"
#define FRCP_IT_STATUS          "STATUS"
#define FRCP_IT_RELEASED        "RELEASED"
#define FRCP_IT_ERROR           "ERROR"
#define FRCP_IT_WARN            "WARN"


data Payload.Inform with
    var      _plain_string it;
    vector[] byte          cid;
    vector[] byte          reason = [] .. ""; 
end


#endif

