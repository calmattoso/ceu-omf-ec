#ifndef _FRCP_PAYLOAD_CEU
#define _FRCP_PAYLOAD_CEU

#include <c.ceu>
#include <uv/uv.ceu>

#include <amqp_base.ceu>
#include "frcp_base.ceu"

#include "payload_data.ceu"
#include "msg_op_handlers.ceu"
#include "handler.ceu"
#include <publish.ceu>

#include "communicator.ceu"
#include "topic.ceu"

/* # Publish_Payload
 * 
 * ## Parameters
 * - `comm`   : The communicator interface.
 * - `topic`  : The destination for the payload.
 * - `payload`: The Payload.
 *
 * ## Description
 * The user only has to provide values for the `op`, `props` and any other desired optinal fields.
 * All other mandatory fields are automatically handled by the library.
 */
code/await Publish_Payload(var& Communicator comm, var& Topic topic, var Payload payload) -> void
do
    payload.mid = [] .. [[ string.random(FRCP_ID_LEN, "%d%l") ]];
    payload.src = [] .. [[ frcp_res_id ]];
    payload.ts  = [] .. [[ os.time() ]];

    vector[] byte msg = [] .. "";
    call PayloadToJSON(&payload, &msg); 
   
    await Publish(&comm.channel, &topic.exchange, PublishContext("", (&&msg[0] as _char&&), _,_,outer.default_props));

    // Record that we're waiting for an `inform` reply if msg is not of type inform.
    if (_strcmp((&&payload.op[0] as _char&&), FRCP_OP_INFORM) != 0) then
        [[
            frcp_response_lookup[@payload.op] = @payload.mid
        ]]
    end
end
pool[] Publish_Payload frcp_publish_dispatch;


#ifdef payload_test
#include <connection.ceu>
#include <channel.ceu>

#include "start.ceu"

var Payload p = _;
p.op     = [] .. FRCP_OP_INFORM;
p.mid    = [] .. [[ string.random(FRCP_ID_LEN, "%l%d") ]];
p.src    = [] .. "test_res";
p.ts     = [] .. [[ os.time() ]];
p.props  = [] .. [[ "{\"test\": \"oioioi\",\"field2\": [1,2,3]}" ]];
p.rp     = [] .. [[ string.random(8, "%l%d") ]];
p.it     = [] .. FRCP_IT_STATUS;
p.cid    = [] .. [[ string.random(FRCP_ID_LEN, "%l%d") ]];
p.reason = [] .. "this is a dummy reason with whitespace.";
p.guard  = [] .. [[ "{\"dummy\":\"dummy\"}" ]];

vector[] byte json_dst;
call PayloadToJSON(&p, &json_dst);

_printf("payload -> json\n");
[[
    json_lua_tab = JSON:decode(@json_dst)
    json_lua_str = JSON:encode_pretty(json_lua_tab)
    print(json_lua_str)
]]

var Payload p_conv = _;
vector[] byte json_src = [] .. [[ json_lua_str ]];
call JSONToPayload(&json_src, &p_conv);

vector[] byte json_dst2;
call PayloadToJSON(&p_conv, &json_dst2);

_printf("json -> payload\n");
[[
    json_lua_tab = JSON:decode(@json_dst2)
    json_lua_str2 = JSON:encode_pretty(json_lua_tab)
    print(json_lua_str2)

    assert(json_lua_str == json_lua_str2)
    print("Equal JSONs!")
]]

par/or do
    var& Connection conn;
    event& void conn_ok;

    watching New_Connection(_) -> (&conn, &conn_ok) do
        await conn_ok;

        var& Channel channel;
        event& void ch_ok;
        spawn New_Channel(&conn) -> (&channel, &ch_ok);
        await ch_ok;

        var Communicator comm = val Communicator(&channel);

        event& void start_done;
        vector[] byte res_id = [] .. "test_resource";
        spawn FRCP_Start(&comm, &res_id) -> (&start_done);
        await start_done;

        var& Topic res_topic;
        event& void topic_ok;
        spawn New_Topic(&comm, &res_id) -> (&res_topic, &topic_ok);
        await topic_ok;

        spawn Publish_Payload(&comm, &res_topic, p) in frcp_publish_dispatch;
        await FOREVER;
    end
with
    await 2s;
end

escape 0;
#endif

#endif

